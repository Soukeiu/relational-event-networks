s2_hat <- var(as.numeric(Y))
s2_b <- mean((Y[,1] - beta_0)*(Y[,2] - beta_0))
s2_hat - s2_b
var(mu)
var(mu)/mu
var(mu)/n
n = 100000
mu <- seq(1,n/2,0.5)
var(mu)/n
s2 = 1
Y <- t(sapply(mu, function(m) rnorm(2,m,s2)))
beta_0 <- mean(Y)
s2_hat <- var(as.numeric(Y))
s2_b <- mean((Y[,1] - beta_0)*(Y[,2] - beta_0))
s2_hat - s2_b
s2_hat <- mean((as.numeric(Y))^2)
s2_b <- mean((Y[,1] - beta_0)*(Y[,2] - beta_0))
s2_hat - s2_b
n = 100000
mu <- seq(1,n/2,0.5)
s2 = 1
Y <- t(sapply(mu, function(m) rnorm(2,m,s2)))
beta_0 <- mean(Y)
s2_hat <- mean((as.numeric(Y))^2)
s2_b <- mean((Y[,1] - beta_0)*(Y[,2] - beta_0))
s2_hat - s2_b
beta_0 <- mean(Y)
s2_hat <- mean((as.numeric(Y)-beta_0)^2)
s2_b <- mean((Y[,1] - beta_0)*(Y[,2] - beta_0))
s2_hat - s2_b
n = 100000
mu <- seq(1,n)
s2 = 1
Y <- t(sapply(mu, function(m) rnorm(2,m,s2)))
beta_0 <- mean(Y)
s2_hat <- mean((as.numeric(Y)-beta_0)^2)
s2_b <- mean((Y[,1] - beta_0)*(Y[,2] - beta_0))
s2_hat - s2_b
var(mu)
var(seq(1,100))
var(seq(1,101))
Y <- t(sapply(mu, function(m) rnorm(2,m,s2)))
beta_0 <- mean(Y)
s2_hat <- mean((as.numeric(Y)-beta_0)^2)
s2_hat - s2_b
s2_b <- mean((Y[,1] - beta_0)*(Y[,2] - beta_0))
var(mu)/s2
var(mu)/n
n = 100000
mu <- seq(1,n)
s2 = 1
Y <- t(sapply(mu, function(m) rnorm(2,m,s2)))
beta_0 <- mean(Y)
s2_hat <- mean((as.numeric(Y)-beta_0)^2)
s2_b <- mean((Y[,1] - beta_0)*(Y[,2] - beta_0))
s2_hat - s2_b
var(mu)/n
n = 1000000
mu <- seq(1,n)
s2 = 1
Y <- t(sapply(mu, function(m) rnorm(2,m,s2)))
beta_0 <- mean(Y)
s2_hat <- mean((as.numeric(Y)-beta_0)^2)
s2_b <- mean((Y[,1] - beta_0)*(Y[,2] - beta_0))
s2_hat - s2_b
var(mu)/n
n = 1000000
mu <- seq(1,n)
s2 = 5
Y <- t(sapply(mu, function(m) rnorm(2,m,s2)))
beta_0 <- mean(Y)
s2_hat <- mean((as.numeric(Y)-beta_0)^2)
s2_b <- mean((Y[,1] - beta_0)*(Y[,2] - beta_0))
s2_hat - s2_b
var(mu)/n
n = 1000000
mu <- seq(1,n^2,n)
s2 = 5
n = 100000
mu <- seq(1,n^2,n)
s2 = 5
Y <- t(sapply(mu, function(m) rnorm(2,m,s2)))
beta_0 <- mean(Y)
s2_hat <- mean((as.numeric(Y)-beta_0)^2)
s2_b <- mean((Y[,1] - beta_0)*(Y[,2] - beta_0))
s2_hat - s2_b
var(mu)/n
n = 100000
mu <- seq(1,n^2,n)
s2 = 1
Y <- t(sapply(mu, function(m) rnorm(2,m,s2)))
beta_0 <- mean(Y)
s2_hat <- mean((as.numeric(Y)-beta_0)^2)
s2_b <- mean((Y[,1] - beta_0)*(Y[,2] - beta_0))
s2_hat - s2_b
n = 100000
mu <- seq(1,n^2,n)
s2 = 0.1
Y <- t(sapply(mu, function(m) rnorm(2,m,s2)))
beta_0 <- mean(Y)
s2_hat <- mean((as.numeric(Y)-beta_0)^2)
s2_b <- mean((Y[,1] - beta_0)*(Y[,2] - beta_0))
s2_hat - s2_b
n = 10000
mu <- seq(1,n^2,n)
s2 = 0.1
Y <- t(sapply(mu, function(m) rnorm(2,m,s2)))
beta_0 <- mean(Y)
s2_hat <- mean((as.numeric(Y)-beta_0)^2)
s2_b <- mean((Y[,1] - beta_0)*(Y[,2] - beta_0))
s2_hat - s2_b
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
unlist(sample(c("n","a","n","e","t","c","i")))
paste(sample(c("n","a","n","e","t","c","i")),sep="")
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
paste(c("c","e"))
paste(c("c",e))
help(paste)
as.character(sample(c("n","a","n","e","t","c","i")))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
sample(c("n","a","n","e","t","c","i"))
n = 1000
sigma = 1
mu_1 = 0
mu_2 = 2
x1 = rnorm(n,mu_1,sigma)
x2 = rnorm(n,mu_2,sigma)
t.test(x1,x2)
mean(x1) + 1.96*sd(x1)/sqrt(n)
qnorm(c(0.025,0.975))
mean(x1) + qnorm(c(0.025,0.975))*sd(x1)/sqrt(n)
mean(x1) + qnorm(c(0.025,0.975))*sd(x1)/sqrt(n)
mean(x2) + qnorm(c(0.025,0.975))*sd(x2)/sqrt(n)
mean(x1)
mean(x2)
mean(x1) + qnorm(c(0.025,0.975))*sd(x1)/sqrt(n)
mean(x2) + qnorm(c(0.025,0.975))*sd(x2)/sqrt(n)
t.test(x1,x2)
mu_1 = 0
mu_2 = 1
x1 = rnorm(n,mu_1,sigma)
x2 = rnorm(n,mu_2,sigma)
mean(x1)
mean(x2)
mean(x1) + qnorm(c(0.025,0.975))*sd(x1)/sqrt(n)
mean(x2) + qnorm(c(0.025,0.975))*sd(x2)/sqrt(n)
t.test(x1,x2)
n = 1000
sigma = 10
mu_1 = 0
mu_2 = 1
x1 = rnorm(n,mu_1,sigma)
x2 = rnorm(n,mu_2,sigma)
mean(x1)
mean(x2)
mean(x1) + qnorm(c(0.025,0.975))*sd(x1)/sqrt(n)
mean(x2) + qnorm(c(0.025,0.975))*sd(x2)/sqrt(n)
t.test(x1,x2)
n = 1000
sigma = 100
mu_1 = 0
mu_2 = 1
x1 = rnorm(n,mu_1,sigma)
x2 = rnorm(n,mu_2,sigma)
mean(x1)
mean(x2)
mean(x1) + qnorm(c(0.025,0.975))*sd(x1)/sqrt(n)
mean(x2) + qnorm(c(0.025,0.975))*sd(x2)/sqrt(n)
t.test(x1,x2)
n = 1000
sigma = 20
mu_1 = 0
mu_2 = 1
x1 = rnorm(n,mu_1,sigma)
x2 = rnorm(n,mu_2,sigma)
mean(x1)
mean(x2)
mean(x1) + qnorm(c(0.025,0.975))*sd(x1)/sqrt(n)
mean(x2) + qnorm(c(0.025,0.975))*sd(x2)/sqrt(n)
t.test(x1,x2)
mean(x1) + qnorm(c(0.025,0.975))*sd(x1)/sqrt(n)
mean(x2) + qnorm(c(0.025,0.975))*sd(x2)/sqrt(n)
n = 1000
sigma = 10
mu_1 = 0
mu_2 = 1
x1 = rnorm(n,mu_1,sigma)
x2 = rnorm(n,mu_2,sigma)
mean(x1)
mean(x2)
mean(x1) + qnorm(c(0.025,0.975))*sd(x1)/sqrt(n)
mean(x2) + qnorm(c(0.025,0.975))*sd(x2)/sqrt(n)
t.test(x1,x2)
mean(x1) + qnorm(c(0.025,0.975))*sd(x1)/sqrt(n)
mean(x2) + qnorm(c(0.025,0.975))*sd(x2)/sqrt(n)
n = 1000
sigma = 11
mu_1 = 0
mu_2 = 1
x1 = rnorm(n,mu_1,sigma)
x2 = rnorm(n,mu_2,sigma)
mean(x1)
mean(x2)
mean(x1) + qnorm(c(0.025,0.975))*sd(x1)/sqrt(n)
mean(x2) + qnorm(c(0.025,0.975))*sd(x2)/sqrt(n)
t.test(x1,x2)
mean(x1)
mean(x2) + qnorm(c(0.025,0.975))*sd(x2)/sqrt(n)
mean(x1) + qnorm(c(0.025,0.975))*sd(x1)/sqrt(n)
mean(x2)
quantile(x1,c(0.025,0.975))
n = 1000
sigma = 12
mu_1 = 0
mu_2 = 1
x1 = rnorm(n,mu_1,sigma)
x2 = rnorm(n,mu_2,sigma)
mean(x1)
mean(x2)
mean(x1) + qnorm(c(0.025,0.975))*sd(x1)/sqrt(n)
mean(x2) + qnorm(c(0.025,0.975))*sd(x2)/sqrt(n)
n = 1000
sigma = 7
mu_1 = 0
mu_2 = 0.5
x1 = rnorm(n,mu_1,sigma)
x2 = rnorm(n,mu_2,sigma)
mean(x1)
mean(x2)
mean(x1) + qnorm(c(0.025,0.975))*sd(x1)/sqrt(n)
mean(x2) + qnorm(c(0.025,0.975))*sd(x2)/sqrt(n)
t.test(x1,x2)
library(RColorBrewer)
library(ggplot2)
library(gridExtra)
library(rstan)
library(igraph)
install.packages(igraph)
install.packages("igraph")
library(RColorBrewer)
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
fx( 2L, 5 )
library(rstan)
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
fx( 2L, 5 )
install.packages("rstan", type = "source")
install.packages("rstan", type = "source")
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
library(rstan)
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
fx( 2L, 5 ) # should be 10
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
cat("\nCXXFLAGS=-O3 -mtune=native -march=native -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
cat("\nCXXFLAGS+=-flto -ffat-lto-objects  -Wno-unused-local-typedefs",
file = M, sep = "\n", append = TRUE)
cat('Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")',
file = file.path(Sys.getenv("HOME"), ".Rprofile"),
sep = "\n", append = TRUE)
cat(readLines(M), sep = "\n")
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
fx( 2L, 5 ) # should be 10
install.packages('rstan', repos = 'https://cloud.r-project.org/', dependencies=TRUE)
install.packages("rstan", repos = "https://cloud.r-project.org/",
dependencies=TRUE)
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
library(RColorBrewer)
library(ggplot2)
library(gridExtra)
library(grid)
library(igraph)
library(rstan)
library(Matrix)
load("processed_data/pre_swallow.RData")
load("processed_data/stan_swallow_simp.RData")
getwd()
setwd("UW/Tyler/relational-event-networks/swallows/")
library(RColorBrewer)
library(ggplot2)
library(gridExtra)
library(grid)
library(igraph)
library(rstan)
library(Matrix)
load("processed_data/pre_swallow.RData")
load("processed_data/stan_swallow_simp.RData")
pre_load = stanc(file = "swallow.stan")
barn_model = stan_model(stanc_ret = pre_load)
expose_stan_functions(barn_model)
start = strptime("2014-07-19", format = "%Y-%m-%d")
pre_load = stanc(file = "swallow.stan")
pre_load = stanc(file = "swallow.stan")
barn_model = stan_model(stanc_ret = pre_load)
expose_stan_functions(barn_model)
start = strptime("2014-07-19", format = "%Y-%m-%d")
grid_arrange_shared_legend <- function(...) {
plots <- list(...)
g <- ggplotGrob(plots[[1]] + theme(legend.position="bottom"))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
p <- grid.arrange(
#do.call(arrangeGrob, lapply(plots, function(x)
#  x + theme(legend.position="none"))),
arrangeGrob(plots[[1]] + theme(legend.position="none"),plots[[2]]
+ theme(legend.position="none"),nrow = 1),
legend, nrow = 2, heights = unit.c(unit(1, "npc") - lheight, lheight))
return(p)
}
gender <- as.factor(sapply(data_list$gender, function(i)
if(i == 0) {"FF"} else if(i == 1) {"MF"} else {"MM"}))
gender.cols <- brewer.pal(3, "Set1")[c(1,3,2)]
est_snapshots <- function(time_hrs) {
estd_ships <- t(sapply(1:data_list$D, function(i) rep(NA,length(time_hrs))))
for(d in 1:data_list$D) {
if(data_list$N[d] > 1) {
for(t in 1:length(time_hrs)) {
#If outside active interval, NA
if(time_hrs[t] < data_list$active_times[d,1] |
time_hrs[t] > data_list$active_times[d,2]) {
estd_ships[d,t] = NA
#If time is before/after first/last midpoint, take midpoint value
}else if(time_hrs[t] <= ship_mids[[d]][1]) {
estd_ships[d,t] = sample_ships[d,1]
}else if(time_hrs[t] >= ship_mids[[d]][data_list$N[d]]) {
estd_ships[d,t] = sample_ships[d,data_list$N[d]]
#Otherwise interpolate
} else {
ob = which(time_hrs[t] <= ship_mids[[d]][2:data_list$N[d]] &
time_hrs[t] > ship_mids[[d]][2:data_list$N[d]-1])
weight = (ship_mids[[d]][ob+1] - time_hrs[t])/
(ship_mids[[d]][ob+1] - ship_mids[[d]][ob])
estd_ships[d,t] = weight*sample_ships[d,ob] +
(1-weight)*sample_ships[d,ob+1]
}
}
} else if (data_list$N[d] == 1) {
for(t in 1:length(time_hrs)) {
if(time_hrs[t] >= data_list$active_times[d,1] &
time_hrs[t] <= data_list$active_times[d,2]) {
estd_ships[d,t] = sample_ships[d,1]
}
}
} else {
for(t in 1:length(time_hrs)) {
if(time_hrs[t] >= data_list$active_times[d,1] &
time_hrs[t] <= data_list$active_times[d,2]) {
estd_ships[d,t] = 0
}
}
}
}
estd_ships
}
m <- matrix(data = 0, nrow = length(tag_ids), ncol = length(tag_ids))
colnames(m) <- tag_ids
rownames(m) <- tag_ids
m[lower.tri(m, diag = FALSE)] <- dyad_friends
m <- m + t(m)
m[m < 0.1] <- 0
net <- graph.adjacency(m,mode = "undirected", weighted = TRUE, diag = FALSE)
# V(net)$sex = covariates$Sex
# V(net)$color = V(net)$sex
# V(net)$color = gsub("F",rgb(1,0,0,0.4),V(net)$color)
# V(net)$color = gsub("M",rgb(0,0,1,0.4),V(net)$color)
# V(net)$label.color = V(net)$sex
# V(net)$label.color = gsub("F",rgb(1,0,0),V(net)$label.color)
# V(net)$label.color = gsub("M",rgb(0,0,1),V(net)$label.color)
set.seed(4)
fr_layout = layout.fruchterman.reingold(net)
plot.igraph(net,layout=fr_layout)
