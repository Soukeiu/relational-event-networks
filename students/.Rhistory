E(net_i)[E(net_i)$timestamp == i]$alpha)
png(paste("figures/animated_net/NetAnimation",sprintf("%03d", i),".png",sep=""),
2000,800,res = 144)
par(mfrow = c(1,2), mar = c(1,3,2,3), oma = c(1,0,0,0))
plot.igraph(net_d,layout=ego_layout, edge.curved = 0, edge.width = 5,
main = "Proximity Pings")
mtext(strftime(possible.times[i]), side = 1, adj = 1.4, cex = 1.2)
plot.igraph(net_i,layout=ego_layout, edge.curved = 0, edge.width = 5,
main = "Inferred Network")
dev.off()
E(net_d)$timestamp[6000]
E(net_d)$timestamp[5000]
E(net_d)$timestamp
estd_ships[[which(indices2 %in% E(net_d)$dyad[i])]]
possible.times
E(net_d)$green = rep(0,length(E(net_d)))
for(i in 1:length(E(net_d))) {
if(E(net_d)$timestamp[i] >= 0 & E(net_d)$timestamp[i] <=
as.numeric(time_to_stamp(time_hrs[length(time_hrs)]))) {
E(net_d)$green[i] = (estd_ships[[which(indices2 %in% E(net_d)$dyad[i])]]
[E(net_d)$timestamp[i]] > 0.8)*1
}
}
i = num.time.stemps
i = num.time.steps
look.back <- i - look.back.default
if (look.back < 0) {
look.back <- 1
}
date.fade.index <- (look.back-1):(i-1)
date.fade.index.length <- length(date.fade.index)
alpha.vec <- alpha.vec.default
if ((alpha.vec.length - date.fade.index.length) > 0) {
alpha.vec <- alpha.vec[-(1:(alpha.vec.length - date.fade.index.length))]
}
for (j in 1:date.fade.index.length) {
active.edges <- which(E(net_d)$timestamp %in% date.fade.index[j])
if (length(active.edges) > 0) {
E(net_d)[active.edges]$alpha <- alpha.vec[j]
}
}
#Color indices as active/inactive
V(net_i)$color <- "white"
V(net_i)$label.color <- "white"
isActive = ((i-1)>=active_stamps[,1] & (i-1)<=active_stamps[,2])
V(net_i)$color[isActive] <- nodes.cols[isActive]
nowInactive = (i-1)-active_stamps[,2] <= look.back.default &
(i-1)-active_stamps[,2] > 0
smooth = (1-(i-1-active_stamps[nowInactive,2])/look.back.default)
if(length(smooth)) {
V(net_i)$color[nowInactive] <- rgb(smooth*nodes.rgb[nowInactive,1],
smooth*nodes.rgb[nowInactive,2],
smooth*nodes.rgb[nowInactive,3], 0.4)
}
V(net_d)$color = V(net_i)$color
#Color edges (green in interaction network if inferred > 0.8)
E(net_d)$color = rgb(0,E(net_d)$green,0,E(net_d)$alpha)
E(net_i)[E(net_i)$timestamp != i]$color = rgb(0,0,0,0)
E(net_i)[E(net_i)$timestamp == i]$color = rgb(0,0,0,
E(net_i)[E(net_i)$timestamp == i]$alpha)
png(paste("figures/animated_net/NetAnimation",sprintf("%03d", i),".png",sep=""),
2000,800,res = 144)
par(mfrow = c(1,2), mar = c(1,3,2,3), oma = c(1,0,0,0))
plot.igraph(net_d,layout=ego_layout, edge.curved = 0, edge.width = 5,
main = "Proximity Pings")
mtext(strftime(possible.times[i]), side = 1, adj = 1.4, cex = 1.2)
plot.igraph(net_i,layout=ego_layout, edge.curved = 0, edge.width = 5,
main = "Inferred Network")
dev.off()
i
time_to_stamp(time_hrs[length(time_hrs)]
as.numeric(time_to_stamp(time_hrs[length(time_hrs)])
time_to_stamp(time_hrs[length(time_hrs)])
estd_shipsestd_ships[[which(indices2 %in% E(net_d)$dyad[i])]]
estd_ships[[which(indices2 %in% E(net_d)$dyad[i])]]
length(estd_ships[[which(indices2 %in% E(net_d)$dyad[i])]])
sapply(estd_ships, function(x) x[83])
i = 83
E(net_d)$green
E(net_d)$timestamp
E(net_d)$green[E(net_d)$timestamp == 83]
E(net_d)$green[E(net_d)$timestamp == 82]
E(net_d)$green[E(net_d)$timestamp == 81]
E(net_d)$green[E(net_d)$timestamp == 80]
E(net_d)$green[E(net_d)$timestamp == 83]
which(E(net_d)$timestamp == 83)
i = 477
E(net_d)$timestamp[i] >= 0
E(net_d)$timestamp[i] <=
as.numeric(time_to_stamp(time_hrs[length(time_hrs)]))
E(net_d)$green[E(net_d)$timestamp == 0]
E(net_d)$green[E(net_d)$timestamp == -1]
E(net_d)$green[E(net_d)$timestamp == -2]
E(net_d)$green[E(net_d)$timestamp == 1]
time_hrs
time_to_stamp(time_hrs)
E(net_d)$green[E(net_d)$timestamp == 82]
i = num.time.stemp
i = num.time.steps
look.back <- i - look.back.default
if (look.back < 0) {
look.back <- 1
}
date.fade.index <- (look.back-1):(i-1)
date.fade.index
date.fade.index.length <- length(date.fade.index)
alpha.vec <- alpha.vec.default
if ((alpha.vec.length - date.fade.index.length) > 0) {
alpha.vec <- alpha.vec[-(1:(alpha.vec.length - date.fade.index.length))]
}
alpha.vec
date.fade.index.length
alpha.vec.length
date.fade.index[j]
for (j in 1:date.fade.index.length) {
active.edges <- which(E(net_d)$timestamp %in% date.fade.index[j])
if (length(active.edges) > 0) {
E(net_d)[active.edges]$alpha <- alpha.vec[j]
}
}
active.edges
for(i in 1:num.time.steps) {
look.back <- i - look.back.default
if (look.back < 0) {
look.back <- 1
}
date.fade.index <- (look.back-1):(i-1)
date.fade.index.length <- length(date.fade.index)
alpha.vec <- alpha.vec.default
if ((alpha.vec.length - date.fade.index.length) > 0) {
alpha.vec <- alpha.vec[-(1:(alpha.vec.length - date.fade.index.length))]
}
for (j in 1:date.fade.index.length) {
active.edges <- which(E(net_d)$timestamp %in% date.fade.index[j])
if (length(active.edges) > 0) {
E(net_d)[active.edges]$alpha <- alpha.vec[j]
}
}
#Color indices as active/inactive
V(net_i)$color <- "white"
V(net_i)$label.color <- "white"
isActive = ((i-1)>=active_stamps[,1] & (i-1)<=active_stamps[,2])
V(net_i)$color[isActive] <- nodes.cols[isActive]
nowInactive = (i-1)-active_stamps[,2] <= look.back.default &
(i-1)-active_stamps[,2] > 0
smooth = (1-(i-1-active_stamps[nowInactive,2])/look.back.default)
if(length(smooth)) {
V(net_i)$color[nowInactive] <- rgb(smooth*nodes.rgb[nowInactive,1],
smooth*nodes.rgb[nowInactive,2],
smooth*nodes.rgb[nowInactive,3], 0.4)
}
V(net_d)$color = V(net_i)$color
#Color edges (green in interaction network if inferred > 0.8)
E(net_d)$color = rgb(0,E(net_d)$green,0,E(net_d)$alpha)
E(net_i)[E(net_i)$timestamp != i-1]$color = rgb(0,0,0,0)
E(net_i)[E(net_i)$timestamp == i-1]$color = rgb(0,0,0,
E(net_i)[E(net_i)$timestamp == i]$alpha)
png(paste("figures/animated_net/NetAnimation",sprintf("%03d", i),".png",sep=""),
2000,800,res = 144)
par(mfrow = c(1,2), mar = c(1,3,2,3), oma = c(1,0,0,0))
plot.igraph(net_d,layout=ego_layout, edge.curved = 0, edge.width = 5,
main = "Proximity Pings")
mtext(strftime(possible.times[i]), side = 1, adj = 1.4, cex = 1.2)
plot.igraph(net_i,layout=ego_layout, edge.curved = 0, edge.width = 5,
main = "Inferred Network")
dev.off()
}
for(i in 1:num.time.steps) {
look.back <- i - look.back.default
if (look.back < 0) {
look.back <- 1
}
date.fade.index <- (look.back-1):(i-1)
date.fade.index.length <- length(date.fade.index)
alpha.vec <- alpha.vec.default
if ((alpha.vec.length - date.fade.index.length) > 0) {
alpha.vec <- alpha.vec[-(1:(alpha.vec.length - date.fade.index.length))]
}
for (j in 1:date.fade.index.length) {
active.edges <- which(E(net_d)$timestamp %in% date.fade.index[j])
if (length(active.edges) > 0) {
E(net_d)[active.edges]$alpha <- alpha.vec[j]
}
}
#Color indices as active/inactive
V(net_i)$color <- "white"
V(net_i)$label.color <- "white"
isActive = ((i-1)>=active_stamps[,1] & (i-1)<=active_stamps[,2])
V(net_i)$color[isActive] <- nodes.cols[isActive]
nowInactive = (i-1)-active_stamps[,2] <= look.back.default &
(i-1)-active_stamps[,2] > 0
smooth = (1-(i-1-active_stamps[nowInactive,2])/look.back.default)
if(length(smooth)) {
V(net_i)$color[nowInactive] <- rgb(smooth*nodes.rgb[nowInactive,1],
smooth*nodes.rgb[nowInactive,2],
smooth*nodes.rgb[nowInactive,3], 0.4)
}
V(net_d)$color = V(net_i)$color
#Color edges (green in interaction network if inferred > 0.8)
E(net_d)$color = rgb(0,E(net_d)$green,0,E(net_d)$alpha)
E(net_i)[E(net_i)$timestamp != i-1]$color = rgb(0,0,0,0)
E(net_i)[E(net_i)$timestamp == i-1]$color =
rgb(0,0,0,E(net_i)[E(net_i)$timestamp == i-1]$alpha)
png(paste("figures/animated_net/NetAnimation",
sprintf("%03d", i),".png",sep=""),
2000,800,res = 144)
par(mfrow = c(1,2), mar = c(1,3,2,3), oma = c(1,0,0,0))
plot.igraph(net_d,layout=ego_layout, edge.curved = 0, edge.width = 5,
main = "Proximity Pings")
mtext(strftime(possible.times[i]), side = 1, adj = 1.4, cex = 1.2)
plot.igraph(net_i,layout=ego_layout, edge.curved = 0, edge.width = 5,
main = "Inferred Network")
dev.off()
}
E(net_d)$timestamp
E(net_d)$timestamp[E(net_d)$alpha > 0]
E(net_d)$timestamp == 82 & E(net_d)$alpha > 0
E(net_d)$green[E(net_d)$timestamp == 82 & E(net_d)$alpha > 0]
E(net_d)$green[E(net_d)$timestamp == 82]
E(net_d)$alpha[E(net_d)$timestamp == 82]
rgb(0,1,0,1)
dev.off()
E(net_d)$color[E(net_d)$alpha > 0]
dev.off()
i = 83
for(i in 1:num.time.steps) {
#Create a fade-out for data network
look.back <- i - look.back.default
if (look.back < 0) {
look.back <- 1
}
date.fade.index <- (look.back-1):(i-1)
date.fade.index.length <- length(date.fade.index)
alpha.vec <- alpha.vec.default
if ((alpha.vec.length - date.fade.index.length) > 0) {
alpha.vec <- alpha.vec[-(1:(alpha.vec.length - date.fade.index.length))]
}
for (j in 1:date.fade.index.length) {
active.edges <- which(E(net_d)$timestamp %in% date.fade.index[j])
if (length(active.edges) > 0) {
E(net_d)[active.edges]$alpha <- alpha.vec[j]
}
}
#Color indices as active/inactive
V(net_i)$color <- "white"
V(net_i)$label.color <- "white"
isActive = ((i-1)>=active_stamps[,1] & (i-1)<=active_stamps[,2])
V(net_i)$color[isActive] <- nodes.cols[isActive]
nowInactive = (i-1)-active_stamps[,2] <= look.back.default &
(i-1)-active_stamps[,2] > 0
smooth = (1-(i-1-active_stamps[nowInactive,2])/look.back.default)
if(length(smooth)) {
V(net_i)$color[nowInactive] <- rgb(smooth*nodes.rgb[nowInactive,1],
smooth*nodes.rgb[nowInactive,2],
smooth*nodes.rgb[nowInactive,3], 0.4)
}
V(net_d)$color = V(net_i)$color
#Color edges (green in interaction network if inferred > 0.8)
E(net_d)$color = rgb(0,E(net_d)$green,0,E(net_d)$alpha)
E(net_i)[E(net_i)$timestamp != i-1]$color = rgb(0,0,0,0)
E(net_i)[E(net_i)$timestamp == i-1]$color =
rgb(0,0,0,E(net_i)[E(net_i)$timestamp == i-1]$alpha)
png(paste("figures/animated_net/NetAnimation",
sprintf("%03d", i),".png",sep=""),
2000,800,res = 144)
par(mfrow = c(1,2), mar = c(1,3,2,3), oma = c(1,0,0,0))
plot.igraph(net_d,layout=ego_layout, edge.curved = 0, edge.width = 5,
main = "Proximity Pings")
mtext(strftime(possible.times[i]), side = 1, adj = 1.4, cex = 1.2)
plot.igraph(net_i,layout=ego_layout, edge.curved = 0, edge.width = 5,
main = "Inferred Network")
dev.off()
}
i = 83
#Create a fade-out for data network
look.back <- i - look.back.default
if (look.back < 0) {
look.back <- 1
}
date.fade.index <- (look.back-1):(i-1)
date.fade.index.length <- length(date.fade.index)
alpha.vec <- alpha.vec.default
if ((alpha.vec.length - date.fade.index.length) > 0) {
alpha.vec <- alpha.vec[-(1:(alpha.vec.length - date.fade.index.length))]
}
for (j in 1:date.fade.index.length) {
active.edges <- which(E(net_d)$timestamp %in% date.fade.index[j])
if (length(active.edges) > 0) {
E(net_d)[active.edges]$alpha <- alpha.vec[j]
}
}
#Color indices as active/inactive
V(net_i)$color <- "white"
V(net_i)$label.color <- "white"
isActive = ((i-1)>=active_stamps[,1] & (i-1)<=active_stamps[,2])
V(net_i)$color[isActive] <- nodes.cols[isActive]
nowInactive = (i-1)-active_stamps[,2] <= look.back.default &
(i-1)-active_stamps[,2] > 0
smooth = (1-(i-1-active_stamps[nowInactive,2])/look.back.default)
if(length(smooth)) {
V(net_i)$color[nowInactive] <- rgb(smooth*nodes.rgb[nowInactive,1],
smooth*nodes.rgb[nowInactive,2],
smooth*nodes.rgb[nowInactive,3], 0.4)
}
V(net_d)$color = V(net_i)$color
#Color edges (green in interaction network if inferred > 0.8)
E(net_d)$color = rgb(0,E(net_d)$green,0,E(net_d)$alpha)
E(net_i)[E(net_i)$timestamp != i-1]$color = rgb(0,0,0,0)
E(net_i)[E(net_i)$timestamp == i-1]$color =
rgb(0,0,0,E(net_i)[E(net_i)$timestamp == i-1]$alpha)
png(paste("figures/animated_net/NetAnimation",
sprintf("%03d", i),".png",sep=""),
2000,800,res = 144)
par(mfrow = c(1,2), mar = c(1,3,2,3), oma = c(1,0,0,0))
plot.igraph(net_d,layout=ego_layout, edge.curved = 0, edge.width = 5,
main = "Proximity Pings")
mtext(strftime(possible.times[i]), side = 1, adj = 1.4, cex = 1.2)
plot.igraph(net_i,layout=ego_layout, edge.curved = 0, edge.width = 5,
main = "Inferred Network")
dev.off()
i
getwd()
#Movie of egocentric network
look.back.default <- 3
alpha.vec.default <- seq(0, 1, length=look.back.default + 1)
alpha.vec.length <- length(alpha.vec.default)
#Calculate inferred network at desired times
possible.times <- seq(as.POSIXct("2008-12-13"),as.POSIXct("2009-03-05"),
by = 24*60*60)
num.time.steps <- length(possible.times)
indices2 <- which(indices[,1] %in% users2 & indices[,2] %in% users2)
time_hrs = difftime(possible.times,start, unit = "hours")
estd_ships <- est_snapshots(time_hrs)
estd_ships <- lapply(indices2, function(x) estd_ships[[x]])
time_to_stamp <- function(t) {
floor((t - as.numeric(time_hrs[1]))/24)
}
active_stamps <- time_to_stamp(active_hours[r_users %in% users2,])
#Basic structure of network of raw data
net_d <- graph.adjacency(matrix(data=0,length(users2),length(users2)),
mode = "undirected", weighted = TRUE, diag = FALSE)
V(net_d)$name = users2
V(net_d)$label.cex = 1.25
V(net_d)$label.color = "white"
nodes.cols = as.character(floor[users2])
for(i in 1:8) {
nodes.cols = gsub(floors[i+1],floor_colors[i], nodes.cols)
}
nodes.rgb <- t(col2rgb(nodes.cols))/255
#Basic structure and edges of inferred network
net_i <- net_d
net_i <- add.edges(net_i, as.character(
sapply(rep(indices2,num.time.steps), function(i) indices[i,1:2])))
E(net_i)$timestamp = sort(rep(1:num.time.steps,choose(length(users2),2)))
E(net_i)$alpha = as.numeric(t(sapply(estd_ships, function(x) x)))
E(net_i)$alpha[is.na(E(net_i)$alpha)] = 0
E(net_i)$color = grey(0.7)
#Add edges to data network (w/ color highlighting corresponding to the
#inferred network)
net_d <- add.edges(net_d, as.character(
sapply(rep(indices2,data_list$N[indices2]), function(i) indices[i,1:2])))
E(net_d)$alpha = 0
E(net_d)$color = grey(0.7)
E(net_d)$timestamp = unlist(sapply(indices2, function(i) if(data_list$N[i])
time_to_stamp(data_list$interactions[i,1:data_list$N[i]])))
E(net_d)$dyad = unlist(sapply(indices2, function(i) rep(i,data_list$N[i])))
E(net_d)$green = rep(0,length(E(net_d)))
for(i in 1:length(E(net_d))) {
if(E(net_d)$timestamp[i] >= 0 & E(net_d)$timestamp[i] <=
as.numeric(time_to_stamp(time_hrs[length(time_hrs)]))) {
E(net_d)$green[i] = (estd_ships[[which(indices2 %in% E(net_d)$dyad[i])]]
[E(net_d)$timestamp[i]] > 0.8)*1
}
}
#Create a series of snapshots
for(i in 1:num.time.steps) {
#Create a fade-out for data network
look.back <- i - look.back.default
if (look.back < 0) {
look.back <- 1
}
date.fade.index <- (look.back-1):(i-1)
date.fade.index.length <- length(date.fade.index)
alpha.vec <- alpha.vec.default
if ((alpha.vec.length - date.fade.index.length) > 0) {
alpha.vec <- alpha.vec[-(1:(alpha.vec.length - date.fade.index.length))]
}
for (j in 1:date.fade.index.length) {
active.edges <- which(E(net_d)$timestamp %in% date.fade.index[j])
if (length(active.edges) > 0) {
E(net_d)[active.edges]$alpha <- alpha.vec[j]
}
}
#Color indices as active/inactive
V(net_i)$color <- "white"
V(net_i)$label.color <- "white"
isActive = ((i-1)>=active_stamps[,1] & (i-1)<=active_stamps[,2])
V(net_i)$color[isActive] <- nodes.cols[isActive]
nowInactive = (i-1)-active_stamps[,2] <= look.back.default &
(i-1)-active_stamps[,2] > 0
smooth = (1-(i-1-active_stamps[nowInactive,2])/look.back.default)
if(length(smooth)) {
V(net_i)$color[nowInactive] <- rgb(smooth*nodes.rgb[nowInactive,1],
smooth*nodes.rgb[nowInactive,2],
smooth*nodes.rgb[nowInactive,3], 0.4)
}
V(net_d)$color = V(net_i)$color
#Color edges (green in interaction network if inferred > 0.8)
E(net_d)$color = rgb(0,E(net_d)$green,0,E(net_d)$alpha)
E(net_i)[E(net_i)$timestamp != i-1]$color = rgb(0,0,0,0)
E(net_i)[E(net_i)$timestamp == i-1]$color =
rgb(0,0,0,E(net_i)[E(net_i)$timestamp == i-1]$alpha)
png(paste("figures/animated_net/NetAnimation",
sprintf("%03d", i),".png",sep=""),
2000,800,res = 144)
par(mfrow = c(1,2), mar = c(1,3,2,3), oma = c(1,0,0,0))
plot.igraph(net_d,layout=ego_layout, edge.curved = 0, edge.width = 5,
main = "Proximity Pings")
mtext(strftime(possible.times[i]), side = 1, adj = 1.4, cex = 1.2)
plot.igraph(net_i,layout=ego_layout, edge.curved = 0, edge.width = 5,
main = "Inferred Network")
dev.off()
}
1:num.time.steps-1
net_i <- add.edges(net_i, as.character(
sapply(rep(indices2,num.time.steps), function(i) indices[i,1:2])))
E(net_i)$timestamp = sort(rep(1:num.time.steps-1,choose(length(users2),2)))
E(net_i)$alpha = as.numeric(t(sapply(estd_ships, function(x) x)))
E(net_i)$alpha[is.na(E(net_i)$alpha)] = 0
E(net_i)$color = grey(0.7)
net_d <- graph.adjacency(matrix(data=0,length(users2),length(users2)),
mode = "undirected", weighted = TRUE, diag = FALSE)
V(net_d)$name = users2
V(net_d)$label.cex = 1.25
V(net_d)$label.color = "white"
nodes.cols = as.character(floor[users2])
for(i in 1:8) {
nodes.cols = gsub(floors[i+1],floor_colors[i], nodes.cols)
}
nodes.rgb <- t(col2rgb(nodes.cols))/255
#Basic structure and edges of inferred network
net_i <- net_d
net_i <- add.edges(net_i, as.character(
sapply(rep(indices2,num.time.steps), function(i) indices[i,1:2])))
E(net_i)$timestamp = sort(rep(1:num.time.steps-1,choose(length(users2),2)))
E(net_i)$alpha = as.numeric(t(sapply(estd_ships, function(x) x)))
E(net_i)$alpha[is.na(E(net_i)$alpha)] = 0
E(net_i)$color = grey(0.7)
net_d <- add.edges(net_d, as.character(
sapply(rep(indices2,data_list$N[indices2]), function(i) indices[i,1:2])))
E(net_d)$alpha = 0
E(net_d)$color = grey(0.7)
E(net_d)$timestamp = unlist(sapply(indices2, function(i) if(data_list$N[i])
time_to_stamp(data_list$interactions[i,1:data_list$N[i]])))
E(net_d)$dyad = unlist(sapply(indices2, function(i) rep(i,data_list$N[i])))
E(net_d)$green = rep(0,length(E(net_d)))
for(i in 1:length(E(net_d))) {
if(E(net_d)$timestamp[i] >= 0 & E(net_d)$timestamp[i] <=
as.numeric(time_to_stamp(time_hrs[length(time_hrs)]))) {
E(net_d)$green[i] = (estd_ships[[which(indices2 %in% E(net_d)$dyad[i])]]
[E(net_d)$timestamp[i]] > 0.8)*1
}
}
#Create a series of snapshots
for(i in 1:num.time.steps) {
#Create a fade-out for data network
look.back <- i - look.back.default
if (look.back < 0) {
look.back <- 1
}
date.fade.index <- (look.back-1):(i-1)
date.fade.index.length <- length(date.fade.index)
alpha.vec <- alpha.vec.default
if ((alpha.vec.length - date.fade.index.length) > 0) {
alpha.vec <- alpha.vec[-(1:(alpha.vec.length - date.fade.index.length))]
}
for (j in 1:date.fade.index.length) {
active.edges <- which(E(net_d)$timestamp %in% date.fade.index[j])
if (length(active.edges) > 0) {
E(net_d)[active.edges]$alpha <- alpha.vec[j]
}
}
#Color indices as active/inactive
V(net_i)$color <- "white"
V(net_i)$label.color <- "white"
isActive = ((i-1)>=active_stamps[,1] & (i-1)<=active_stamps[,2])
V(net_i)$color[isActive] <- nodes.cols[isActive]
nowInactive = (i-1)-active_stamps[,2] <= look.back.default &
(i-1)-active_stamps[,2] > 0
smooth = (1-(i-1-active_stamps[nowInactive,2])/look.back.default)
if(length(smooth)) {
V(net_i)$color[nowInactive] <- rgb(smooth*nodes.rgb[nowInactive,1],
smooth*nodes.rgb[nowInactive,2],
smooth*nodes.rgb[nowInactive,3], 0.4)
}
V(net_d)$color = V(net_i)$color
#Color edges (green in interaction network if inferred > 0.8)
E(net_d)$color = rgb(0,E(net_d)$green,0,E(net_d)$alpha)
E(net_i)[E(net_i)$timestamp != i-1]$color = rgb(0,0,0,0)
E(net_i)[E(net_i)$timestamp == i-1]$color =
rgb(0,0,0,E(net_i)[E(net_i)$timestamp == i-1]$alpha)
png(paste("figures/animated_net/NetAnimation",
sprintf("%03d", i),".png",sep=""),
2000,800,res = 144)
par(mfrow = c(1,2), mar = c(1,3,2,3), oma = c(1,0,0,0))
plot.igraph(net_d,layout=ego_layout, edge.curved = 0, edge.width = 5,
main = "Proximity Pings")
mtext(strftime(possible.times[i]), side = 1, adj = 1.4, cex = 1.2)
plot.igraph(net_i,layout=ego_layout, edge.curved = 0, edge.width = 5,
main = "Inferred Network")
dev.off()
}
